{"version":3,"sources":["Header.jsx","ListItems.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","AppBar","position","Toolbar","style","backgroundColor","Typography","ListItems","props","listItems","items","map","Grid","key","container","item","xs","Checkbox","color","bottom","value","IconButton","onClick","deleteItem","App","state","currentItem","handleInput","bind","addItem","e","this","setState","Date","now","target","newItem","console","log","text","filteredItems","filter","direction","sm","Paper","elevation","variant","align","TextField","type","fullWidth","id","label","marginTop","onChange","Button","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.42bb8b02.chunk.js","sourcesContent":["import React from \"react\";\nimport { AppBar, Typography } from \"@material-ui/core\";\nimport { Toolbar } from \"@material-ui/core\";\nimport CalendarTodayIcon from \"@material-ui/icons/CalendarToday\";\n\nconst Header = () => {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar style={{ backgroundColor: \"#1D315B\" }}>\n        <CalendarTodayIcon />\n        <Typography>&nbsp;&nbsp;Your Planner</Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { Checkbox } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { IconButton } from \"@material-ui/core\";\n\nfunction ListItems(props) {\n  const items = props.items;\n  const listItems = items.map((items) => {\n    /* This returns and creates the input as website elements */\n    return (\n      <Grid key={items.key} container>\n        <Grid item xs={1}>\n          <Checkbox color=\"primary\" />\n        </Grid>\n        <Grid item xs={9}>\n          <p style={{ position: \"relative\", bottom: 5 }}>{items.value}</p>\n        </Grid>\n        <Grid item xs={2}>\n          <IconButton\n            style={{ color: \"#3F51B5\" }}\n            onClick={() => props.deleteItem(items.key)}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </Grid>\n      </Grid>\n    );\n  });\n  return <div>{listItems}</div>;\n}\n\nexport default ListItems;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Grid } from \"@material-ui/core\";\nimport Header from \"./Header.jsx\";\nimport { Component } from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport { Button } from \"@material-ui/core\";\nimport ListItems from \"./ListItems.jsx\";\nimport { Paper } from \"@material-ui/core\";\nimport { Typography } from \"@material-ui/core\";\n\n// Converted to class to monitor state\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      items: [],\n      currentItem: {\n        key: \"\",\n        value: \"\",\n      },\n    };\n    // Explicitly bind to class as it does not bind automatically.\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n  }\n\n  // This method collects the input and sets a unique ID.\n  handleInput(e) {\n    this.setState({\n      currentItem: {\n        key: Date.now(),\n        value: e.target.value,\n      },\n    });\n  }\n\n  // This method adds the new item to the array and clears text from input box.\n  addItem(e) {\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n    if (newItem.text !== \"\") {\n      const items = [...this.state.items, newItem];\n      this.setState({\n        items: items,\n        currentItem: {\n          key: \"\",\n          value: \"\",\n        },\n      });\n      console.log(items);\n    }\n  }\n\n  deleteItem(key) {\n    const filteredItems = this.state.items.filter((items) => items.key !== key);\n    this.setState({\n      items: filteredItems,\n    });\n  }\n\n  render() {\n    return (\n      <Grid direction=\"column\" container>\n        {/* This will contain the navigation bar. */}\n        <Grid item>\n          <Header />\n          <br />\n        </Grid>\n        {/* This will contain the main content. */}\n        <Grid item container>\n          <Grid item xs={1} sm={2} />\n          <Grid item xs={10} sm={8}>\n            <Paper elevation={3}>\n              <br />\n              <Typography\n                variant=\"h5\"\n                align=\"center\"\n                style={{ color: \"#3F51B5\" }}\n              >\n                {\" \"}\n                My Checklist\n              </Typography>\n              <br />\n              {/* Passes data through the base class */}\n              <ListItems\n                items={this.state.items}\n                deleteItem={this.deleteItem}\n              ></ListItems>\n            </Paper>\n            {/* This is used to obtain new entries. */}\n            <TextField\n              type=\"text\"\n              fullWidth\n              id=\"outlined-basic\"\n              label=\"New Checklist Item\"\n              variant=\"outlined\"\n              style={{ marginTop: \"10px\" }}\n              value={this.state.currentItem.value}\n              onChange={this.handleInput}\n            ></TextField>\n            {/* This is used to register clicks. */}\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              fullWidth\n              disabled={!this.state.currentItem.value}\n              style={{ marginTop: \"10px\" }}\n              onClick={() => this.addItem()}\n            >\n              Add to List\n            </Button>\n          </Grid>\n          <Grid item xs={1} sm={2} />\n          {/* NOTE: This needs to be cleaned up \n          <p>{this.state.items.text}</p> */}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}